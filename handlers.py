from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from database import Database

router = Router()


def setup_handlers(db: Database):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @router.message(Command("start"))
    async def cmd_start(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = await db.create_or_get_user(
            message.from_user.id, 
            message.from_user.username
        )
        
        await message.answer(
            "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üí≥ /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç\n"
            "üìã /accounts - –ú–æ–∏ —Å—á–µ—Ç–∞\n"
            "üí∞ /income <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
            "üí∏ /expense <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> - –†–∞—Å—Ö–æ–¥\n"
            "üìä /stats week - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "üìä /stats month - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü\n"
            "ü§ù /share <—Å—á–µ—Ç> <user_id> - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—á–µ—Ç–æ–º\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å—ë, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ"
        )

    @router.message(Command("new_account"))
    async def cmd_new_account(message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            return
        
        account_name = args[1].strip()
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        success = await db.create_account(user_id, account_name)
        if success:
            await message.answer(f"‚úÖ –°—á–µ—Ç '{account_name}' —Å–æ–∑–¥–∞–Ω!")
        else:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    @router.message(Command("accounts"))
    async def cmd_accounts(message: Message):
        """–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        accounts = await db.get_user_accounts(user_id)
        if not accounts:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            return
        
        text = "üí≥ –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n"
        for account in accounts:
            role_emoji = "üëë" if account['role'] == 'owner' else "ü§ù"
            owner_info = "" if account['role'] == 'owner' else f" (–≤–ª–∞–¥–µ–ª–µ—Ü: @{account['owner_username']})"
            text += f"{role_emoji} {account['name']}: {account['balance']:.2f} ‚ÇΩ{owner_info}\n"
        
        await message.answer(text)

    @router.message(Command("income"))
    async def cmd_income(message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
        args = message.text.split()
        if len(args) < 4:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /income <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>\n"
                "–ü—Ä–∏–º–µ—Ä: /income –ö–∞—Ä—Ç–∞ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
            )
            return
        
        account_name = args[1]
        try:
            amount = float(args[2])
            if amount <= 0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        comment = " ".join(args[3:])
        
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await db.add_transaction(
            account['id'], user_id, 'income', amount, None, comment
        )
        
        new_balance = await db.get_account_balance(account['id'])
        await message.answer(
            f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üí≥ –°—á–µ—Ç: {account['name']}\n"
            f"üí∞ –°—É–º–º–∞: +{amount:.2f} ‚ÇΩ\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üè¶ –ë–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ"
        )

    @router.message(Command("expense"))
    async def cmd_expense(message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        args = message.text.split()
        if len(args) < 5:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /expense <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>\n"
                "–ü—Ä–∏–º–µ—Ä: /expense –ö–∞—Ä—Ç–∞ 5000 –ø—Ä–æ–¥—É–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å—ë, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ"
            )
            return
        
        account_name = args[1]
        try:
            amount = float(args[2])
            if amount <= 0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        category_name = args[3]
        comment = " ".join(args[4:])
        
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = await db.get_category_by_name(category_name)
        if not category_id:
            await message.answer(
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å—ë, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ"
            )
            return
        
        await db.add_transaction(
            account['id'], user_id, 'expense', amount, category_id, comment
        )
        
        new_balance = await db.get_account_balance(account['id'])
        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üí≥ –°—á–µ—Ç: {account['name']}\n"
            f"üí∏ –°—É–º–º–∞: -{amount:.2f} ‚ÇΩ\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üè¶ –ë–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ"
        )

    @router.message(Command("stats"))
    async def cmd_stats(message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        args = message.text.split()
        if len(args) < 2 or args[1] not in ['week', 'month']:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: /stats week –∏–ª–∏ /stats month"
            )
            return
        
        period = args[1]
        days = 7 if period == 'week' else 30
        period_name = "–Ω–µ–¥–µ–ª—é" if period == 'week' else "–º–µ—Å—è—Ü"
        
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        stats = await db.get_stats(user_id, days)
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}:\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥—ã: {stats['total_income']:.2f} ‚ÇΩ\n"
        text += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {stats['total_expense']:.2f} ‚ÇΩ\n"
        text += f"üíµ –†–∞–∑–Ω–∏—Ü–∞: {stats['total_income'] - stats['total_expense']:.2f} ‚ÇΩ\n\n"
        
        if stats['categories']:
            text += "üìÇ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for cat in stats['categories']:
                text += f"‚Ä¢ {cat['name']}: {cat['amount']:.2f} ‚ÇΩ ({cat['percentage']:.1f}%)\n"
        else:
            text += "üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        
        await message.answer(text)

    @router.message(Command("share"))
    async def cmd_share(message: Message):
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—á–µ—Ç–æ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        args = message.text.split()
        if len(args) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /share <—Å—á–µ—Ç> <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /share –ö–∞—Ä—Ç–∞ 123456789"
            )
            return
        
        account_name = args[1]
        try:
            target_user_telegram_id = int(args[2])
        except ValueError:
            await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        user_id = await db.create_or_get_user(
            message.from_user.id,
            message.from_user.username
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if account['owner_id'] != user_id:
            await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = await db.create_or_get_user(target_user_telegram_id)
        
        success = await db.share_account(account['id'], user_id, target_user_id)
        if success:
            await message.answer(
                f"‚úÖ –°—á–µ—Ç '{account_name}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∞—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_telegram_id}!"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

    return router