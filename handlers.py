from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.infrastructure.database import Database

# Helpers for money formatting


def _fmt_amount(amount: float, decimals: int = 2) -> str:
    try:
        return format(amount, f",.{decimals}f").replace(",", " ")
    except Exception:
        # Fallback to simple format
        return f"{amount:.{decimals}f}"


def _fmt_money(amount: float, decimals: int = 2) -> str:
    return f"{_fmt_amount(amount, decimals)} ‚ÇΩ"


router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫
BTN_ADD_INCOME = "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
BTN_ADD_EXPENSE = "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ"
BTN_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
BTN_ACCOUNTS = "üí≥ –°—á–µ—Ç–∞"
BTN_CANCEL = "–û—Ç–º–µ–Ω–∞"

CATEGORIES = ["–µ–¥–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∂–∏–ª—å—ë", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¥—Ä—É–≥–æ–µ"]


class ExpenseFSM(StatesGroup):
    ChoosingAccount = State()
    ChoosingCategory = State()
    EnteringAmount = State()
    Confirming = State()


class IncomeFSM(StatesGroup):
    ChoosingAccount = State()
    EnteringAmount = State()


def _main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_ADD_INCOME)],
            [KeyboardButton(text=BTN_ADD_EXPENSE)],
            [KeyboardButton(text=BTN_STATS)],
            [KeyboardButton(text=BTN_ACCOUNTS)],
        ],
        resize_keyboard=True,
    )


def setup_handlers(db: Database):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    @router.message(Command("start"))
    async def cmd_start(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await db.create_or_get_user(message.from_user.id, message.from_user.username)

        await message.answer(
            "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç!\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=_main_menu(),
        )

    @router.message(F.text == BTN_ADD_EXPENSE)
    async def start_expense_flow(message: Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)
        accounts = await db.get_user_accounts(user_id)

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        cancel_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=BTN_CANCEL)]], resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=cancel_kb)

        if not accounts:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            await state.clear()
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu())
            return

        if len(accounts) == 1:
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä
            await state.update_data(account_id=accounts[0]["id"], account_name=accounts[0]["name"])
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            builder = [
                [InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat:{cat}") for cat in CATEGORIES[:3]],
                [InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat:{cat}") for cat in CATEGORIES[3:]],
            ]
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=builder))
            await state.set_state(ExpenseFSM.ChoosingCategory)
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
            rows = []
            row = []
            for i, acc in enumerate(accounts, 1):
                row.append(
                    InlineKeyboardButton(
                        text=f"{acc['name']} ({_fmt_money(acc['balance'], 0)})",
                        callback_data=f"acc:{acc['id']}:{acc['name']}",
                    )
                )
                if i % 2 == 0:
                    rows.append(row)
                    row = []
            if row:
                rows.append(row)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
            await state.set_state(ExpenseFSM.ChoosingAccount)

    @router.message(F.text == BTN_STATS)
    async def stats_menu(message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="period:week"),
                    InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="period:month"),
                ]
            ]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)

    @router.message(F.text == BTN_ADD_INCOME)
    async def start_income_flow(message: Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ—Ö–æ–¥) —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)
        accounts = await db.get_user_accounts(user_id)

        cancel_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=BTN_CANCEL)]], resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=cancel_kb)

        if not accounts:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            await state.clear()
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu())
            return

        if len(accounts) == 1:
            await state.update_data(account_id=accounts[0]["id"], account_name=accounts[0]["name"])
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            await state.set_state(IncomeFSM.EnteringAmount)
        else:
            rows = []
            row = []
            for i, acc in enumerate(accounts, 1):
                row.append(
                    InlineKeyboardButton(
                        text=f"{acc['name']} ({_fmt_money(acc['balance'], 0)})",
                        callback_data=f"incacc:{acc['id']}:{acc['name']}",
                    )
                )
                if i % 2 == 0:
                    rows.append(row)
                    row = []
            if row:
                rows.append(row)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
            await state.set_state(IncomeFSM.ChoosingAccount)

    @router.callback_query(F.data.startswith("incacc:"))
    async def income_choose_account(cb: CallbackQuery, state: FSMContext):
        if await state.get_state() != IncomeFSM.ChoosingAccount:
            await cb.answer()
            return
        _, acc_id, acc_name = cb.data.split(":", 2)
        await state.update_data(account_id=int(acc_id), account_name=acc_name)
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        await state.set_state(IncomeFSM.EnteringAmount)
        await cb.answer()

    @router.message(IncomeFSM.EnteringAmount)
    async def income_enter_amount(message: Message, state: FSMContext):
        text = message.text.strip()
        first, *rest = text.split()
        try:
            amount = float(first.replace(",", "."))
            if amount <= 0:
                raise ValueError()
        except Exception:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        comment = " ".join(rest)
        data = await state.get_data()
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)
        account_id = data.get("account_id")
        account_name = data.get("account_name")
        await db.add_transaction(account_id, user_id, "income", amount, None, comment)
        new_balance = await db.get_account_balance(account_id)
        await message.answer(
            f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{_fmt_amount(amount, 0)}"
            f" (—Å—á—ë—Ç: {account_name}). –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '‚Äî'}",
            reply_markup=_main_menu(),
        )
        await message.answer(f"üè¶ –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ '{account_name}': {_fmt_money(new_balance)}")
        await state.clear()

    @router.message(F.text == BTN_ACCOUNTS)
    async def accounts_menu(message: Message):
        """–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ"""
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)
        accounts = await db.get_user_accounts(user_id)
        if not accounts:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>", reply_markup=_main_menu()
            )
            return
        text = "üí≥ –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n"
        for account in accounts:
            role_emoji = "üëë" if account["role"] == "owner" else "ü§ù"
            owner_info = "" if account["role"] == "owner" else f" (–≤–ª–∞–¥–µ–ª–µ—Ü: @{account['owner_username']})"
            text += f"{role_emoji} {account['name']}: {_fmt_money(account['balance'])}{owner_info}\n"
        await message.answer(text, reply_markup=_main_menu())

    @router.message(F.text == BTN_CANCEL)
    async def cancel_anytime(message: Message, state: FSMContext):
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=_main_menu())

    @router.callback_query(F.data.startswith("acc:"))
    async def choose_account(cb: CallbackQuery, state: FSMContext):
        if await state.get_state() != ExpenseFSM.ChoosingAccount:
            await cb.answer()
            return
        _, acc_id, acc_name = cb.data.split(":", 2)
        await state.update_data(account_id=int(acc_id), account_name=acc_name)
        # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        rows = [
            [InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat:{cat}") for cat in CATEGORIES[:3]],
            [InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat:{cat}") for cat in CATEGORIES[3:]],
        ]
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
        await state.set_state(ExpenseFSM.ChoosingCategory)
        await cb.answer()

    @router.callback_query(F.data.startswith("cat:"))
    async def choose_category(cb: CallbackQuery, state: FSMContext):
        if await state.get_state() != ExpenseFSM.ChoosingCategory:
            await cb.answer()
            return
        _, cat = cb.data.split(":", 1)
        await state.update_data(category=cat)
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        await state.set_state(ExpenseFSM.EnteringAmount)
        await cb.answer()

    @router.message(ExpenseFSM.EnteringAmount)
    async def enter_amount(message: Message, state: FSMContext):
        text = message.text.strip()
        # –æ–∂–∏–¥–∞–µ—Ç—Å—è: "500" –∏–ª–∏ "500 —É–∂–∏–Ω –≤ –∫–∞—Ñ–µ"
        first, *rest = text.split()
        try:
            amount = float(first.replace(",", "."))
            if amount <= 0:
                raise ValueError()
        except Exception:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        comment = " ".join(rest)
        data = await state.get_data()
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é id
        category_id = await db.get_category_by_name(data.get("category"))
        if not category_id:
            await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=_main_menu())
            await state.clear()
            return
        account_id = data.get("account_id")
        account_name = data.get("account_name")
        await db.add_transaction(account_id, user_id, "expense", amount, category_id, comment)
        new_balance = await db.get_account_balance(account_id)
        category_name = data.get("category")
        await message.answer(
            f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ: {_fmt_amount(amount, 0)} ({category_name},"
            f" —Å—á—ë—Ç: {account_name}). –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '‚Äî'}",
            reply_markup=_main_menu(),
        )
        await message.answer(f"üè¶ –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ '{account_name}': {_fmt_money(new_balance)}")
        await state.clear()

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∏–∂–µ
    @router.message(Command("new_account"))
    async def cmd_new_account(message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            return

        account_name = args[1].strip()
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)

        success = await db.create_account(user_id, account_name)
        if success:
            await message.answer(f"‚úÖ –°—á–µ—Ç '{account_name}' —Å–æ–∑–¥–∞–Ω!")
        else:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    @router.message(Command("accounts"))
    async def cmd_accounts(message: Message):
        """–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)

        accounts = await db.get_user_accounts(user_id)
        if not accounts:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π: /new_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            return

        text = "üí≥ –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n"
        for account in accounts:
            role_emoji = "üëë" if account["role"] == "owner" else "ü§ù"
            owner_info = "" if account["role"] == "owner" else f" (–≤–ª–∞–¥–µ–ª–µ—Ü: @{account['owner_username']})"
            text += f"{role_emoji} {account['name']}: {_fmt_money(account['balance'])}{owner_info}\n"

        await message.answer(text)

    @router.message(Command("income"))
    async def cmd_income(message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
        args = message.text.split()
        if len(args) < 4:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /income <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>\n"
                "–ü—Ä–∏–º–µ—Ä: /income –ö–∞—Ä—Ç–∞ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
            )
            return

        account_name = args[1]
        try:
            amount = float(args[2])
            if amount <= 0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        comment = " ".join(args[3:])

        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)

        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        await db.add_transaction(account["id"], user_id, "income", amount, None, comment)

        new_balance = await db.get_account_balance(account["id"])
        await message.answer(
            f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üí≥ –°—á–µ—Ç: {account['name']}\n"
            f"üí∞ –°—É–º–º–∞: +{_fmt_money(amount)}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üè¶ –ë–∞–ª–∞–Ω—Å: {_fmt_money(new_balance)}"
        )

    @router.message(Command("expense"))
    async def cmd_expense(message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        args = message.text.split()
        if len(args) < 5:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /expense <—Å—á–µ—Ç> <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>\n"
                "–ü—Ä–∏–º–µ—Ä: /expense –ö–∞—Ä—Ç–∞ 5000 –ø—Ä–æ–¥—É–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å—ë, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ"
            )
            return

        account_name = args[1]
        try:
            amount = float(args[2])
            if amount <= 0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        category_name = args[3]
        comment = " ".join(args[4:])

        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = await db.get_category_by_name(category_name)
        if not category_id:
            await message.answer(
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å—ë, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ"
            )
            return

        await db.add_transaction(account["id"], user_id, "expense", amount, category_id, comment)

        new_balance = await db.get_account_balance(account["id"])
        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üí≥ –°—á–µ—Ç: {account['name']}\n"
            f"üí∏ –°—É–º–º–∞: -{_fmt_money(amount)}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üè¶ –ë–∞–ª–∞–Ω—Å: {_fmt_money(new_balance)}"
        )

    @router.message(Command("stats"))
    async def cmd_stats(message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∫–æ–º–∞–Ω–¥–∞)"""
        args = message.text.split()
        if len(args) < 2 or args[1] not in ["week", "month"]:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n" "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: /stats week –∏–ª–∏ /stats month"
            )
            return
        period = args[1]
        await _send_stats(message, period, message.from_user)

    @router.callback_query(F.data.startswith("period:"))
    async def stats_period(cb: CallbackQuery):
        period = cb.data.split(":", 1)[1]
        await _send_stats(cb.message, period, cb.from_user)
        await cb.answer()

    async def _send_stats(message: Message, period: str, user):
        if period not in ("week", "month"):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return
        days = 7 if period == "week" else 30
        period_name = "–Ω–µ–¥–µ–ª—é" if period == "week" else "–º–µ—Å—è—Ü"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫)
        user_id = await db.create_or_get_user(user.id, user.username)
        stats = await db.get_stats(user_id, days)
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}:\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥—ã: {_fmt_money(stats['total_income'])}\n"
        text += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {_fmt_money(stats['total_expense'])}\n"
        text += f"üíµ –†–∞–∑–Ω–∏—Ü–∞: {_fmt_money(stats['total_income'] - stats['total_expense'])}\n\n"
        if stats["categories"]:
            text += "üìÇ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for cat in stats["categories"]:
                text += f"‚Ä¢ {cat['name']}: {_fmt_money(cat['amount'])} ({cat['percentage']:.1f}%)\n"
        else:
            text += "üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        await message.answer(text)

    @router.message(Command("share"))
    async def cmd_share(message: Message):
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—á–µ—Ç–æ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        args = message.text.split()
        if len(args) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /share <—Å—á–µ—Ç> <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /share –ö–∞—Ä—Ç–∞ 123456789"
            )
            return

        account_name = args[1]
        try:
            target_user_telegram_id = int(args[2])
        except ValueError:
            await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        user_id = await db.create_or_get_user(message.from_user.id, message.from_user.username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        account = await db.get_account_by_name(user_id, account_name)
        if not account:
            await message.answer(f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if account["owner_id"] != user_id:
            await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = await db.create_or_get_user(target_user_telegram_id)

        success = await db.share_account(account["id"], user_id, target_user_id)
        if success:
            await message.answer(f"‚úÖ –°—á–µ—Ç '{account_name}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∞—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_telegram_id}!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

    return router
